version: '3'

volumes:
    prometheus_data: {}
    grafana_data: {}

services:
    # 1interviewparjour-web-blue:
    #     build:
    #         context: ../../web
    #     container_name: 1interviewparjour-web-blue
    #     hostname: 1interviewparjour-web-blue
    #     env_file:
    #         - web.env
    #     ports:
    #         - "3000:80"
    # 1interviewparjour-web-green:
    #     build:
    #         context: ../../web
    #     container_name: 1interviewparjour-web-green
    #     hostname: 1interviewparjour-web-green
    #     env_file:
    #         - web.env
    #     ports:
    #         - "3001:80"
    # 1interviewparjour-backend-blue:
    #     build:
    #         context: ../../1interviewparjour
    #     container_name: 1interviewparjour-backend-blue
    #     hostname: 1interviewparjour-backend-blue
    #     env_file:
    #         - back.env
    #     ports:
    #         - "8000:8000"
    #     network_mode: "host" # can also communicate to service outside of the docker network (example : MySQL and Prometheus which are not dockerized)
    # 1interviewparjour-backend-green:
    #     build:
    #         context: ../../1interviewparjour
    #     container_name: 1interviewparjour-backend-green
    #     hostname: 1interviewparjour-backend-green
    #     env_file:
    #         - back.env
    #     ports:
    #         - "8001:8000"
    #     network_mode: "host" # can also communicate to service outside of the docker network (example : MySQL and Prometheus which are not dockerized)
    ####### OBSERVABILITY STACK #######
    prometheus:
        image: prom/prometheus:v2.1.0
        volumes:
            - prometheus/:/etc/prometheus/
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
            - 9090:9090
        network_mode: "host" # can also communicate to service outside of the docker network (example : MySQL and Prometheus which are not dockerized)
        restart: always
    node-exporter:
        image: prom/node-exporter
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - --collector.filesystem.ignored-mount-points
            - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
        ports:
            - 9100:9100
        network_mode: "host" # can also communicate to service outside of the docker network (example : MySQL and Prometheus which are not dockerized)
        restart: always
        deploy:
            mode: global
    grafana:
        image: grafana/grafana
        #depends_on:
        #    - prometheus
        ports:
            - 3002:3000
        volumes:
            - grafana_data:/var/lib/grafana
        network_mode: "host" # can also communicate to service outside of the docker network (example : MySQL and Prometheus which are not dockerized)
        restart: always
